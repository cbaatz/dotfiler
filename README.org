* Dotfiler

Dotfiler is a script that helps you maintain (chosen) dot-files as
symlinks to another directory. This can make backup and version
control of the dot-files you consider important easier.

** Understanding Dotfiler

Dotfiler helps you manage dot-files according to the following
convention:

- Managed dot-files (normal files or directories) are symlinks to
  target files in a designated dot-files directory.
- The target files lack the leading dot of the dot-file they
  represent, but otherwise have the same name.

For example, if your dot-files directory is =~/dotdir= and we want to
manage =.emacs=, and =~/.ssh=, we would have the following files (->
indicates symlink):

#+BEGIN_EXAMPLE
# Normal files
~/dotdir/emacs       # Target of ~/.emacs
~/dotdir/shh         # Target of ~/.ssh
~/dotdir/ssh/config  # Example file inside ssh dir

# Symlinked dot-files
~/.emacs  -> ~/dotdir/emacs
~/.ssh    -> ~/dotdir/ssh/config

# Examples of unmanaged (normal) files
~/.vimrc
~/.emacs.d
#+END_EXAMPLE

** Installation
Recommended way (using Git for your dot-files directory):

: # Replace ~/dotfiles with whatever path your prefer
: mkdir ~/dotfiles
: cd ~/dotfiles
: git init
: git submodule add git://github.com/cbaatz/dotfiler.git
: ln -s dotfiler/dots . # Optional but recommended

If you're not using Git for your dot-files directory, you can just
clone the repo instead of adding it as a submodule:

: # Replace ~/dotfiles with whatever path your prefer
: mkdir ~/dotfiles
: cd ~/dotfiles
: git clone git://github.com/cbaatz/dotfiler.git
: ln -s dotfiler/dots . # Optional but recommended

Note that Dotfiler must be executed from the dot-files directory since
there is no environment variable or setting that specifies where it
is.

** Usage

: dots

Show dot-files management status.

: dots add DOT_FILES
: # Example: cd ~/dotfiles; dots add ~/.emacs ~/.vimrc

Manages dot-files by moving each file to your dot-files directory
(removing the leading dot) and creating a symlink from your home-dir.

: dots return DOT_FILES
: # Example: cd ~/dotfiles; dots return ~/.emacs ~/.vimrc
: #          cd ~/dotfiles; dots return ~/* # Unmanage all

Unmanages dot-files by moving each file back to your home-dir (removing
the symlink). Ignores files that are not managed.

: dots update [<options>]
: # Example: cd ~/dotfiles
: #          git checkout HEAD^
: #          dots update

Updates symlinks in home-dir to point to the files in the dot-files
directory. Use this

Options:

-k Keep symlinks in home-dir even if they have no counterpart in the
   dot-files directory (i.e. they are broken).

-F Overwrite normal files in home-dir with symlinks to files in
   dot-files directory. This can be dangerous.

** Alternative approach
If you'd like to avoid symlinks, you can make your home directory a
git repo, exclude all files by default (=echo '*' >
~/.git/info/exclude=) and add exceptions for each file you want to
manage (=echo '!.emacs' >> ~/.git/info/exclude=). See
[[http://www.kernel.org/pub/software/scm/git/docs/gitignore.html]] for
details.

I find managing dot-files in a separate directory neater and it fits
my back-up scheme better.
** Abandoned ideas
*** Files inside dot-directories
Dotfiler was meant to support symlinking individual files in
dot-directories. However, this was dropped since it complicates things
more than the value justifies; it should be straightforward (if
tedious) to manually replicate Dotfiler's functionality.

Managing specific files/directories inside a dot-directory requires a
list of managed files to recover to a clean home-dir -- which dir in a
path is actually managed?

Use =.gitignore= or similar in your dot-files directory to exclude
specific files/directories inside dot-directories from version
control. (Remember you can use negated patterns.)
